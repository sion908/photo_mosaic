<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>閉校イベント - キャンドルモザイク表示</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background-color: #000;
      color: white;
      font-family: 'Helvetica Neue', Arial, sans-serif;
      height: 100vh;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .title {
      position: absolute;
      top: 20px;
      left: 0;
      right: 0;
      text-align: center;
      z-index: 10;
    }

    h1 {
      font-size: 2.5em;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
      margin: 0;
    }

    p.subtitle {
      font-size: 1.2em;
      margin-top: 5px;
      opacity: 0.8;
    }

    .mosaic-container {
      position: relative;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      /* 画像がコンテナからはみ出さないように */
    }

    .mosaic-image {
      max-width: 95vw;
      /* 横幅は画面の95%まで */
      max-height: 80vh;
      /* 高さは画面の80%まで */
      object-fit: contain;
      /* アスペクト比を維持 */
      transition: opacity 1s ease-in-out;
    }

    .update-notification {
      position: fixed;
      bottom: 30px;
      right: 30px;
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 15px 20px;
      border-radius: 5px;
      font-size: 1.2em;
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
    }

    .show-notification {
      opacity: 1;
    }

    .counter {
      position: fixed;
      bottom: 30px;
      left: 30px;
      font-size: 1.2em;
      opacity: 0.7;
    }
  </style>
</head>

<body>
  <div class="title">
    <h1>校章モザイクアート</h1>
    <p class="subtitle">みんなの思い出でつくる、私たちの学校</p>
  </div>

  <div class="mosaic-container">
    <img id="mosaicImage" class="mosaic-image" src="{{ initial_mosaic }}" alt="校章モザイクアート">
  </div>

  <div id="updateNotification" class="update-notification">
    新しい写真が追加されました！
  </div>

  <div class="counter">
    参加者数: <span id="contributorCount">0</span>
  </div>

  <script>
    let contributorCount = 0;
    const mosaicImage = document.getElementById('mosaicImage');
    const notification = document.getElementById('updateNotification');
    const countDisplay = document.getElementById('contributorCount');

    // WebSocket接続
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const ws = new WebSocket(`${protocol}//${window.location.host}/ws/mosaic`);

    ws.onopen = function () {
      console.log('WebSocket接続が確立されました');
    };

    ws.onmessage = function (event) {
      try {
        const data = JSON.parse(event.data);
        if (data.action === 'mosaic_updated') {
          // 新しい画像へのフェード効果
          mosaicImage.style.opacity = '0.3';

          // 少し遅延させて新画像を読み込み、フェードイン
          setTimeout(() => {
            // キャッシュを強制的に無視するためのランダムパラメータを追加
            const noCache = '?t=' + new Date().getTime();
            mosaicImage.src = data.path + noCache;

            mosaicImage.onload = function () {
              mosaicImage.style.opacity = '1';

              // 画像サイズをコンソールに出力（デバッグ用）
              console.log(`画像サイズ: ${this.naturalWidth}x${this.naturalHeight}`);
            };

            // 参加者カウント更新
            contributorCount++;
            countDisplay.textContent = contributorCount;

            // 通知表示
            notification.classList.add('show-notification');
            setTimeout(() => {
              notification.classList.remove('show-notification');
            }, 3000);
          }, 500);
        }
      } catch (error) {
        console.error('メッセージの解析エラー:', error);
      }
    };

    ws.onerror = function (error) {
      console.error('WebSocketエラー:', error);
    };

    ws.onclose = function () {
      console.log('WebSocket接続が閉じられました');
      // 自動再接続を試みるコードを追加することも可能
    };

    // 画像が読み込まれたときにサイズを確認（初期表示時）
    mosaicImage.onload = function () {
      console.log(`初期画像サイズ: ${this.naturalWidth}x${this.naturalHeight}`);
    };

    // 初期カウント設定（サーバーから取得）
    fetch('/api/stats')
      .then(response => response.json())
      .then(data => {
        if (data.contributor_count !== undefined) {
          contributorCount = data.contributor_count;
          countDisplay.textContent = contributorCount;
        }
      })
      .catch(error => console.error('統計情報の取得に失敗:', error));
  </script>
</body>

</html>